public class Solution {
    public boolean isHappy(String s) {
        
        int n = s.length();
        if(n < 3){
            return false;
        }
        for(int i = 0; i < n - 2; i++){
            if(s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)){
                return false;
            }
        }
        return true;
    }
} 

=== Contents of answers.jsonl ===
{"task_id": "HumanEval_kotlin/32", "completion": "\n\n\n\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class SortThird {\n    public static List<Integer> sortThird(List<Integer> l) {\n        \n        List<Integer> sortedElements = new ArrayList<>();\n        \n        \n        for (int i = 2; i < l.size(); i += 3) {\n            sortedElements.add(l.get(i));\n        }\n        \n        \n        Collections.sort(sortedElements);\n        \n        \n        List<Integer> result = new ArrayList<>(l);\n        \n        \n        for (int i = 2, j = 0; i < l.size(); i += 3, j++) {\n            result.set(i, sortedElements.get(j));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(sortThird(Arrays.asList(1, 2, 3))); \n        System.out.println(sortThird(Arrays.asList(5, 6, 3", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/74", "completion": "\n\n\n\n\npublic boolean iscube(int a) {\n    \n    return Math.cbrt(Math.abs(a)) % 1 == 0;\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/160", "completion": "\n\n\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution {\n    public static List<Integer> generateIntegers(int a, int b) {\n        \n        List<Integer> evenNumbers = new ArrayList<>();\n\n        \n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n\n        \n        for (int i = a; i <= b; i++) {\n            \n            String str = Integer.toString(i);\n\n            \n            boolean allDigitsEven = true;\n            for (int j = 0; j < str.length(); j++) {\n                int digit = Character.getNumericValue(str.charAt(j));\n                if (digit % 2 != 0) {\n                    allDigitsEven = false;\n                    break;\n                }\n            }\n\n            \n            if (allDigitsEven) {\n                evenNumbers.add(i);\n            }\n        }\n\n        return evenNumbers;\n    }\n\n    public static", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/88", "completion": "\n\n\n\n\npublic class BoredomCounter {\n    public static int is_bored(String s) {\n        \n        String[] sentences = s.split(\"[.?!]\");\n        \n        int boredomCount = 0;\n        \n        for (String sentence : sentences) {\n            \n            sentence = sentence.trim();\n            \n            \n            if (sentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n} \n\n\nSystem.out.println(BoredomCounter.is_bored(\"Hello world\")); \nSystem.out.println(BoredomCounter.is_bored(\"The sky is blue. The sun is shining. I love this weather\")); \nSystem.out.println(BoredomCounter.is_bored(\"I am bored. Are you?\")); \nSystem.out.println(BoredomCounter.is_bored(\"I am happy. I am not bored.\")); \nSystem.out.println(BoredomCounter.is_bored(\"I am tired. I need a break!\"));", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/89", "completion": "\n\n\n\n\npublic class Main {\n    public static boolean any_int(int a, int b, int c) {\n        return (a + b == c) || (a + c == b) || (b + c == a);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(any_int(5, 2, 7)); \n        System.out.println(any_int(3, 2, 2)); \n        System.out.println(any_int(3, -2, 1)); \n        System.out.println(any_int(3.6, -2.2, 2)); \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/119", "completion": "\n\n\n\n\npublic class Solution {\n    public int sumOfTwoDigits(int[] arr, int k) {\n        \n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i] >= 10 && arr[i] <= 99) {\n                sum += arr[i];\n            }\n        }\n        return sum;\n    }\n} \n\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] arr = {111, 21, 3, 4000, 5, 6, 7, 8, 9};\n        int k = 4;\n        System.out.println(solution.sumOfTwoDigits(arr, k)); \n    }\n} \n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/3", "completion": "\n\n\n\n\npublic boolean belowZero(int[] operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n} \n\n\n\n\n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/84", "completion": "\n\n\n\n\nimport java.util.*;\n\npublic class Solution {\n    public static List<int[]> getRow(List<List<Integer>> lst, int x) {\n        \n        List<int[]> coordinates = new ArrayList<>();\n\n        \n        for (int i = 0; i < lst.size(); i++) {\n            \n            List<Integer> row = lst.get(i);\n\n            \n            for (int j = 0; j < row.size(); j++) {\n                \n                if (row.get(j).equals(x)) {\n                    \n                    coordinates.add(new int[]{i, j});\n                }\n            }\n        }\n\n        \n        Collections.sort(coordinates, (a, b) -> a[0] - b[0]);\n\n        \n        for (int i = 0; i < coordinates.size(); i++) {\n            int[] coord = coordinates.get(i);\n            int row = coord[0];\n            int col = coord[1];\n\n           ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/17", "completion": "\n\n\n\n\npublic class MusicParser {\n    public static List<Integer> parseMusic(String music) {\n        \n        String[] notes = music.split(\" \");\n        \n        \n        List<Integer> durations = new ArrayList<>();\n        \n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                \n                durations.add(4);\n            } else if (note.endsWith(\"|\")) {\n                \n                int duration = 2; \n                if (note.startsWith(\".\")) {\n                    \n                    duration = 1;\n                }\n                durations.add(duration);\n            }\n        }\n        \n        return durations;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/57", "completion": "\n\n\n\n\npublic class SumToN {\n    public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(30)); \n        System.out.println(sum_to_n(100)); \n        System.out.println(sum_to_n(5)); \n        System.out.println(sum_to_n(10)); \n        System.out.println(sum_to_n(1)); \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/87", "completion": "\n\n\n    \n    if (lst.isEmpty()) {\n        return null\n    }\n\n    \n    val sortedList = lst.sorted()\n\n    \n    if (sortedList.size < 2) {\n        return null\n    }\n\n    \n    return sortedList[1]\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/34", "completion": "\n\n\n\n\npublic int max_element(List<Integer> list) {\n    \n    int max = list.get(0);\n\n    \n    for (int i = 1; i < list.size(); i++) {\n        \n        if (list.get(i) > max) {\n            max = list.get(i);\n        }\n    }\n\n    \n    return max;\n} \n\n\npublic static void main(String[] args) {\n    List<Integer> list1 = Arrays.asList(1, 2, 3);\n    System.out.println(max_element(list1)); \n\n    List<Integer> list2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n    System.out.println(max_element(list2)); \n} \n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/21", "completion": "\n\n\n\n\npublic class RescaleToUnit {\n\n    public static double[] rescaleToUnit(double[] nums) {\n        \n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        for (double num : nums) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n\n        \n        double[] result = new double[nums.length];\n\n        \n        for (int i = 0; i < nums.length; i++) {\n            result[i] = (nums[i] - min) / (max - min);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        double[] nums = {1.0, 2.0, 3.0, 4.0, 5.0};\n        double[] rescaled = rescaleToUnit(nums);\n\n        \n        for (double num : rescaled) {\n            System.out.print(num + \" \");\n        }\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/42", "completion": "\n\n\n\n\npublic class Solution {\n    public String change_base(int x, int base) {\n        \n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.append(x % base);\n            x /= base;\n        }\n        return sb.reverse().toString();\n    }\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/27", "completion": "\n\n\n\n\npublic class FlipCase {\n\n    public static String flip_case(String str) {\n        \n        StringBuilder result = new StringBuilder();\n\n        \n        for (char c : str.toCharArray()) {\n            \n            if (Character.isUpperCase(c)) {\n                \n                result.append(Character.toLowerCase(c));\n            } else {\n                \n                result.append(Character.toUpperCase(c));\n            }\n        }\n\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(flip_case(\"Hello\"));  \n        System.out.println(flip_case(\"WORLD\"));  \n        System.out.println(flip_case(\"Java\"));   \n        System.out.println(flip_case(\"123abcXYZ\"));  \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/141", "completion": "\n\n\n\n\npublic class Simplify {\n\n    public static boolean simplify(String x, String n) {\n        \n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        \n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n\n        \n        return productNumerator % productDenominator == 0;\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(simplify(\"1/5\", \"5/1\")); \n        System.out.println(simplify(\"1/6\", \"2/1\")); \n        System.out.println(simplify(\"7/10\", \"10/2\")); \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/98", "completion": "\n\n\n\n\npublic class WordsString {\n\n    public static String[] words_string(String str) {\n        \n        String[] words = str.split(\"[,\\\\s]+\");\n        return words;\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(Arrays.toString(words_string(\"Hi, my name is John\"))); \n        System.out.println(Arrays.toString(words_string(\"One, two, three, four, five, six\"))); \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/75", "completion": "\n\n\n\n\npublic class HexPrimes {\n    public static int countHexPrimes(String num) {\n        \n        String primeHexDigits = \"2357BD\";\n        int count = 0;\n\n        \n        for (int i = 0; i < num.length(); i++) {\n            \n            if (primeHexDigits.indexOf(num.charAt(i)) != -1) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n} \n\n\nSystem.out.println(countHexPrimes(\"AB\")); \nSystem.out.println(countHexPrimes(\"1077E\")); \nSystem.out.println(countHexPrimes(\"ABED1A33\")); \nSystem.out.println(countHexPrimes(\"123456789ABCDEF0\")); \nSystem.out.println(countHexPrimes(\"2020\")); \n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/92", "completion": "\n\n\n\n\nimport java.util.*;\n\npublic class Solution {\n    public static boolean check_dict_case(Map<Object, Object> dict) {\n        \n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        \n        Object firstKey = dict.keySet().iterator().next();\n        boolean allLowerCase = firstKey instanceof String && ((String) firstKey).matches(\"[a-z]+\");\n        boolean allUpperCase = firstKey instanceof String && ((String) firstKey).matches(\"[A-Z]+\");\n\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false; \n            }\n            if (allLowerCase && !((String) key).matches(\"[a-z]+\")) {\n                return false; \n            }\n            if (allUpperCase && !((String) key).matches(\"[A-Z]+\")) {\n                return false; \n            }\n        }\n\n        \n        return true;\n    }\n\n    public static void", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/4", "completion": "\n\n\n\n\npublic class MeanAbsoluteDeviation {\n    public static double mean_absolute_deviation(double[] data) {\n        \n        double sum = 0;\n        for (double num : data) {\n            sum += num;\n        }\n        double mean = sum / data.length;\n\n        \n        double madSum = 0;\n        for (double num : data) {\n            madSum += Math.abs(num - mean);\n        }\n\n        \n        return madSum / data.length;\n    }\n\n    public static void main(String[] args) {\n        double[] data = {1.0, 2.0, 3.0, 4.0};\n        System.out.println(\"Mean Absolute Deviation: \" + mean_absolute_deviation(data));\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/62", "completion": "\n\n\n\n\npublic class Solution {\n    public static String circularShift(int x, int shift) {\n        \n        String str = Integer.toString(x);\n        int len = str.length();\n        \n        \n        if (shift > len) {\n            return new StringBuilder(str).reverse().toString();\n        }\n        \n        \n        \n        int index = len - shift % len;\n        String shifted = str.substring(index) + str.substring(0, index);\n        \n        return shifted;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/43", "completion": "\n\n\n\n\npublic class TriangleArea {\n    public static double triangle_area(int base, int height) {\n        return (base * height) / 2.0;\n    }\n} \n\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(TriangleArea.triangle_area(5, 3)); \n    }\n} \n\n\n\n\n\n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/128", "completion": "\n\n\n\n\npublic class Solution {\n    public int digits(int n) {\n        \n        String numStr = Integer.toString(n);\n        \n        \n        int product = 1;\n        \n        \n        boolean hasOddDigit = false;\n        \n        \n        for (char c : numStr.toCharArray()) {\n            \n            int digit = Character.getNumericValue(c);\n            \n            \n            if (digit % 2 != 0) {\n                \n                product *= digit;\n                \n                \n                hasOddDigit = true;\n            }\n        }\n        \n        \n        return hasOddDigit ? product : 0;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/129", "completion": "\n\n\n\n\npublic class IsNested {\n    public static boolean is_nested(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '[') {\n                count++;\n            } else if (s.charAt(i) == ']') {\n                count--;\n                if (count < 0) {\n                    return false;\n                }\n            }\n        }\n        return count > 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(is_nested(\"[[]]\")); \n        System.out.println(is_nested(\"[]]]]]]][[[[[]\")); \n        System.out.println(is_nested(\"[][]\")); \n        System.out.println(is_nested(\"[]\")); \n        System.out.println(is_nested(\"[[][]]\")); \n        System.out.println(is_nested(\"[[]][[\")); \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/46", "completion": "\n\n\n\n\npublic class Solution {\n    public static boolean is_palindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n\n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n} \n\n\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(is_palindrome(\"\"));\n        System.out.println(is_palindrome(\"aba\"));\n        System.out.println(is_palindrome(\"aaaaa\"));\n        System.out.println(is_palindrome(\"zbcd\"));\n    }\n} \n\n\n\n\n\n\n\n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/93", "completion": "\n\n\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PrimeNumberGenerator {\n    public static List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        if (n <= 2) return primes; \n\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n\n        return primes;\n    }\n\n    private static boolean isPrime(int num) {\n        if (num <= 1) return false; \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false; \n        }\n        return true;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/90", "completion": "\n\n\n\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(encode(\"test\"));\n        System.out.println(encode(\"This is a message\"));\n    }\n\n    public static String encode(String message) {\n        \n        return \"\";\n    }\n} \n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/150", "completion": "\n\n\n\n\nclass Strongest_Extension {\n    public String findStrongestExtension(String className, String[] extensions) {\n        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtension = \"\";\n        \n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n            \n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n            \n            int strength = capCount - smCount;\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        \n        return className + \".\" + strongestExtension;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/40", "completion": "\n\n\n\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class IncrementList {\n\n    public static List<Integer> incr_list(List<Integer> numbers) {\n        \n        List<Integer> incrementedNumbers = new ArrayList<>();\n\n        \n        for (Integer number : numbers) {\n            \n            incrementedNumbers.add(number + 1);\n        }\n\n        \n        return incrementedNumbers;\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(incr_list(new ArrayList<>(List.of(1, 2, 3)))); \n        System.out.println(incr_list(new ArrayList<>(List.of(5, 3, 5, 2, 3, 3, 9, 0, 123)))); \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/51", "completion": "\n\n\n\n\npublic class SameChars {\n    public static boolean same_chars(String s1, String s2) {\n        \n        int[] count = new int[26];\n        for (char c : s1.toCharArray()) {\n            count[c - 'a']++;\n        }\n        for (char c : s2.toCharArray()) {\n            count[c - 'a']--;\n        }\n        for (int i : count) {\n            if (i != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/99", "completion": "\n\n\n\n\npublic int choose_num(int x, int y) {\n    \n    if (x > y) {\n        return -1;\n    }\n\n    \n    if (y % 2 == 0) {\n        return y;\n    }\n\n    \n    if (y >= x && y <= y) {\n        return y - 1;\n    }\n\n    \n    return -1;\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/65", "completion": "\n\n\n\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Solution {\n    public List<Integer> pluck(List<Integer> nodes) {\n        \n        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestIndex = -1;\n\n        \n        for (int i = 0; i < nodes.size(); i++) {\n            int currentValue = nodes.get(i);\n            if (currentValue % 2 == 0 && currentValue < smallestEvenValue) {\n                smallestEvenValue = currentValue;\n                smallestIndex = i;\n            }\n        }\n\n        \n        if (smallestIndex == -1) {\n            return new ArrayList<>();\n        }\n\n        \n        return new ArrayList<>(List.of(smallestEvenValue, smallestIndex));\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/158", "completion": "\n\n\n\n\npublic class Solution {\n    public String solve(String s) {\n        \n        boolean hasLetter = false;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                break;\n            }\n        }\n\n        if (!hasLetter) {\n            return new StringBuilder(s).reverse().toString();\n        }\n\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n                } else {\n                    result.append(Character.toUpperCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/106", "completion": "\n\n\n\n\npublic boolean moveOneBall(int[] arr) {\n    \n    if (arr.length <= 1) {\n        return true;\n    }\n\n    int count = 0;\n\n    \n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i - 1] > arr[i]) {\n            count++;\n        }\n    }\n\n    \n    if (count > 1) {\n        return false;\n    }\n\n    \n    if (arr[arr.length - 1] > arr[0]) {\n        return false;\n    }\n\n    return true;\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/58", "completion": "\n\n\n\n\npublic boolean correct_bracketing(String brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets.charAt(i) == '(') {\n            count++;\n        } else if (brackets.charAt(i) == ')') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n} \n\n\npublic static void main(String[] args) {\n    System.out.println(correct_bracketing(\"(\")); \n    System.out.println(correct_bracketing(\"()\")); \n    System.out.println(correct_bracketing(\"(()())\")); \n    System.out.println(correct_bracketing(\")(()\")); \n} \n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/67", "completion": "\n\n\n\n\nimport java.util.List;\nimport java.util.Collections;\n\npublic class StrangeSorter {\n    public static List<Integer> strangeSortList(List<Integer> numbers) {\n        \n        List<Integer> sortedList = new ArrayList<>(numbers);\n\n        \n        Collections.sort(sortedList);\n\n        \n        int minIndex = 0;\n        int maxIndex = sortedList.size() - 1;\n\n        \n        List<Integer> resultList = new ArrayList<>();\n\n        \n        while (minIndex <= maxIndex) {\n            if (minIndex == maxIndex) {\n                \n                resultList.add(sortedList.get(minIndex));\n                break;\n            }\n\n            \n            resultList.add(sortedList.get(minIndex++));\n\n            \n            resultList.add(sortedList.get(maxIndex--));\n        }\n\n        return resultList;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/154", "completion": "\n\n\n\n\npublic boolean right_angle_triangle(int a, int b, int c) {\n    \n    int[] sides = {a, b, c};\n    Arrays.sort(sides);\n\n    \n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n} \n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/113", "completion": "\n\n\n\n\nimport java.util.Arrays;\nimport java.util.Comparator;\n\npublic class Solution {\n    public static void main(String[] args) {\n        System.out.println(Arrays.toString(sort_array(new int[]{1, 5, 2, 3, 4})));\n        System.out.println(Arrays.toString(sort_array(new int[]{-2, -3, -4, -5, -6})));\n        System.out.println(Arrays.toString(sort_array(new int[]{1, 0, 2, 3, 4})));\n    }\n\n    public static int[] sort_array(int[] arr) {\n        \n        Arrays.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                \n                int count1 = Integer.bitCount(o1);\n                int count2 = Integer.bitCount(o2);\n\n                \n                if (count1 == count2) {\n                    return o1 - o2;\n                }\n\n                \n                return count1 - count2;\n            }\n        });\n\n        return arr;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/124", "completion": "\n\n\n\n\npublic String intersection(int[] interval1, int[] interval2) {\n    \n    int start = Math.max(interval1[0], interval2[0]);\n    int end = Math.min(interval1[1], interval2[1]);\n\n    \n    if (start > end) {\n        return \"NO\";\n    }\n\n    \n    int length = end - start + 1;\n\n    \n    for (int i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n\n    return \"YES\";\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/71", "completion": "\n\n\n\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Solution {\n    public static List<String> total_match(List<String> list1, List<String> list2) {\n        int sum1 = 0;\n        int sum2 = 0;\n\n        for (String str : list1) {\n            sum1 += str.length();\n        }\n\n        for (String str : list2) {\n            sum2 += str.length();\n        }\n\n        if (sum1 < sum2) {\n            return list1;\n        } else if (sum2 < sum1) {\n            return list2;\n        } else {\n            return list1;\n        }\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(total_match(new ArrayList<>(), new ArrayList<>()).equals(new ArrayList<>()));\n        System.out.println(total_match(new ArrayList<>(List.of(\"hi\", \"admin\")), new ArrayList<>(List.of(\"hI\", \"Hi\"))).equals(new ArrayList<>(List.of(\"hI\", \"Hi\"))));\n        System.out.println(total_match(new ArrayList<>(List.of(\"hi\", \"admin\")), new ArrayList<>(List.of(\"hi\", \"hi\", \"admin\", \"project\"))).equals(new ArrayList<>(List.of(\"hi\",", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/0", "completion": "\n\n\n\n\npublic boolean has_close_elements(List<Double> nums, double threshold) {\n    \n    Collections.sort(nums);\n\n    \n    for (int i = 0; i < nums.size() - 1; i++) {\n        \n        if (nums.get(i + 1) - nums.get(i) < threshold) {\n            return true;\n        }\n    }\n\n    \n    return false;\n} \n\n\npublic static void main(String[] args) {\n    List<Double> nums = Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0);\n    double threshold = 0.3;\n    System.out.println(has_close_elements(nums, threshold)); \n} \n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/100", "completion": "\n\n\n\n\npublic class Solution {\n    public static String rounded_avg(int n, int m) {\n        if(n > m){\n            return \"-1\";\n        }\n        int sum = 0;\n        for(int i = n; i <= m; i++){\n            sum += i;\n        }\n        double avg = Math.round((double)sum / (m - n + 1));\n        return \"0b\" + Integer.toBinaryString((int)avg);\n    }\n} \n\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(rounded_avg(1, 5)); \n        System.out.println(rounded_avg(7, 5)); \n        System.out.println(rounded_avg(10, 20)); \n        System.out.println(rounded_avg(20, 33)); \n    }\n} \n\n\nif (typeof exports === 'object') {\n    module.exports = rounded_avg;\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/70", "completion": "\n\n\n\n\npublic class SmallestChange {\n    public static int smallest_change(int[] arr) {\n        int count = 0;\n        int left = 0;\n        int right = arr.length - 1;\n\n        while (left < right) {\n            if (arr[left] != arr[right]) {\n                count++;\n            }\n            left++;\n            right--;\n        }\n\n        return count;\n    }\n} \n\n\nSystem.out.println(SmallestChange.smallest_change(new int[]{1, 2, 3, 5, 4, 7, 9, 6})); \nSystem.out.println(SmallestChange.smallest_change(new int[]{1, 2, 3, 4, 3, 2, 2})); \nSystem.out.println(SmallestChange.smallest_change(new int[]{1, 2, 3, 2, 1})); \nSystem.out.println(SmallestChange.smallest_change(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/81", "completion": "\n\n\n\n\npublic class Solution {\n    public String solve(int N) {\n        \n        int sum = 0;\n        while(N > 0){\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/78", "completion": "\n\n\n\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class GradeEquation {\n    public static List<String> gradeEquation(List<Double> gpas) {\n        List<String> grades = new ArrayList<>();\n        for (Double gpa : gpas) {\n            if (gpa >= 4.0) {\n                grades.add(\"A+\");\n            } else if (gpa >= 3.7) {\n                grades.add(\"A\");\n            } else if (gpa >= 3.3) {\n                grades.add(\"A-\");\n            } else if (gpa >= 3.0) {\n                grades.add(\"B+\");\n            } else if (gpa >= 2.7) {\n                grades.add(\"B\");\n            } else if (gpa >= 2.3) {\n                grades.add(\"B-\");\n            } else if (gpa >= 2.0) {\n                grades.add(\"C+\");\n            } else if (gpa >= 1.7) {\n                grades.add(\"C\");\n            } else if (gpa >= 1.3) {\n                grades.add(\"C-\");\n            } else if (gpa >= 1.0) {\n                grades.add(\"D+\");\n            } else", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/54", "completion": "\n\n\n\n\npublic boolean monotonic(int[] nums) {\n    if (nums == null || nums.length <= 1) return true;\n\n    boolean increasing = false;\n    boolean decreasing = false;\n\n    for (int i = 1; i < nums.length; i++) {\n        if (nums[i] > nums[i - 1]) increasing = true;\n        if (nums[i] < nums[i - 1]) decreasing = true;\n\n        if (increasing && decreasing) return false;\n    }\n\n    return true;\n} \n\n\nSystem.out.println(monotonic(new int[]{1, 2, 4, 20})); \nSystem.out.println(monotonic(new int[]{1, 20, 4, 10})); \nSystem.out.println(monotonic(new int[]{4, 1, 0, -10})); \nSystem.out.println(monotonic(new int[]{})); \nSystem.out.println(monotonic(new int[]{1})); \nSystem.out.println(monotonic(new int[]{1, 2, 3, 4, 5})); \nSystem.out.println(monotonic(new", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/94", "completion": "\n\n\n\n\npublic class UnitDigitProduct {\n\n    public static int multiply(int a, int b) {\n        \n        int unitDigitA = Math.abs(a % 10);\n        int unitDigitB = Math.abs(b % 10);\n\n        \n        return unitDigitA * unitDigitB;\n    }\n} \n\n\nSystem.out.println(UnitDigitProduct.multiply(148, 412)); \nSystem.out.println(UnitDigitProduct.multiply(19, 28));   \nSystem.out.println(UnitDigitProduct.multiply(2020, 1851)); \nSystem.out.println(UnitDigitProduct.multiply(14, -15));  \n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/79", "completion": "\n\n\n\n\npublic class PrimeLength {\n\n    public static boolean prime_length(String str) {\n        int length = str.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n} \n\n\nSystem.out.println(prime_length(\"Hello\")); \nSystem.out.println(prime_length(\"abcdcba\")); \nSystem.out.println(prime_length(\"kittens\")); \nSystem.out.println(prime_length(\"orange\")); \n\n\n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/140", "completion": "\n\n\n\n\npublic String filterWords(String sentence) {\n    \n    String[] words = sentence.split(\" \");\n    StringBuilder result = new StringBuilder();\n\n    \n    for (String word : words) {\n        if (isPrime(word.length())) {\n            \n            if (result.length() > 0) {\n                result.append(\" \");\n            }\n            result.append(word);\n        }\n    }\n\n    return result.toString();\n}\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/127", "completion": "\n\n\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution {\n    public List<Integer> tribonacci(int n) {\n        \n        List<Integer> result = new ArrayList<>();\n        \n        \n        if (n == 0) {\n            result.add(1);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(3);\n            return result;\n        }\n        \n        \n        result.add(1);\n        result.add(3);\n        result.add(2);\n        \n        \n        for (int i = 3; i <= n; i++) {\n            int nextElement = result.get(i - 1) + result.get(i - 2) + result.get(i - 3);\n            result.add(nextElement);\n        }\n        \n        return result;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/133", "completion": "\n\n\n    \n    return listOf(null, null)\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/18", "completion": "\n\n\n\n\npublic class HowManyTimes {\n    public static int how_many_times(String s, String sub) {\n        if (s == null || sub == null || s.isEmpty() || sub.isEmpty()) {\n            return 0;\n        }\n\n        int count = 0;\n        int index = 0;\n\n        while ((index = s.indexOf(sub, index)) != -1) {\n            count++;\n            index++;\n        }\n\n        return count;\n    }\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/159", "completion": "\n\n\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/118", "completion": "\n\n\n\n\npublic class Solution {\n    public static int solution(int[] nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.length; i += 2) {\n            if (nums[i] % 2 != 0) {\n                sum += nums[i];\n            }\n        }\n        return sum;\n    }\n} \n\n\n\nclass Main {\n    public static void main(String[] args) {\n        System.out.println(solution(new int[]{5, 8, 7, 1}));\n        System.out.println(solution(new int[]{3, 3, 3, 3, 3}));\n        System.out.println(solution(new int[]{30, 13, 24, 321}));\n    }\n} \n\n\n\n\n\n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/33", "completion": "\n\n\n\n\nimport java.util.*;\n\npublic class UniqueElements {\n\n    public static List<Integer> unique(List<Integer> list) {\n        \n        Set<Integer> uniqueSet = new HashSet<>(list);\n\n        \n        List<Integer> sortedList = new ArrayList<>(uniqueSet);\n        Collections.sort(sortedList);\n\n        return sortedList;\n    }\n\n    public static void main(String[] args) {\n        \n        List<Integer> testList = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        System.out.println(unique(testList)); \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/153", "completion": "\n\n\n\n\npublic class Solution {\n    public String intToMiniRoman(int num) {\n        \n    }\n} \n\n\nSystem.out.println(int_to_mini_roman(19)); \nSystem.out.println(int_to_mini_roman(152)); \nSystem.out.println(int_to_mini_roman(426)); \n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/123", "completion": "\n\n\n\n\npublic class IsSorted {\n    public static boolean isSorted(int[] nums) {\n        \n        if (nums.length <= 1) {\n            return true;\n        }\n\n        \n        for (int i = 0; i < nums.length - 1; i++) {\n            \n            if (nums[i] > nums[i + 1]) {\n                return false;\n            }\n        }\n\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        int[] nums1 = {5};\n        System.out.println(isSorted(nums1)); \n\n        int[] nums2 = {1, 2, 3, 4, 5};\n        System.out.println(isSorted(nums2)); \n\n        int[] nums3 = {1, 3, 2, 4, 5};\n        System.out.println(isSorted(nums3)); \n\n        int[] nums4 = {1, 2, 3, 4, 5, 6};\n        System.out.println", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/20", "completion": "\n\n\n\n\nimport java.util.Arrays;\n\npublic class FindClosestElements {\n    public static void main(String[] args) {\n        System.out.println(Arrays.toString(find_closest_elements(new double[]{1.0, 2.0, 3.0, 4.0, 5.0, 2.2})));\n        System.out.println(Arrays.toString(find_closest_elements(new double[]{1.0, 2.0, 3.0, 4.0, 5.0, 2.0})));\n    }\n\n    public static double[] find_closest_elements(double[] nums) {\n        \n        Arrays.sort(nums);\n\n        \n        double minDiff = Double.MAX_VALUE;\n        double[] closestPair = new double[2];\n\n        \n        for (int i = 0; i < nums.length - 1; i++) {\n            double diff = nums[i + 1] - nums[i];\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair[0] = nums[i];\n                closestPair[1] = nums[i + 1];\n            }\n        }\n\n       ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/53", "completion": "\n\n\n\n\npublic boolean correct_bracketing(String brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets.charAt(i) == '<') {\n            count++;\n        } else if (brackets.charAt(i) == '>') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n} \n\n\npublic static void main(String[] args) {\n    System.out.println(correct_bracketing(\"<\")); \n    System.out.println(correct_bracketing(\"<>\")); \n    System.out.println(correct_bracketing(\"<<><>>\")); \n    System.out.println(correct_bracketing(\"><<\")); \n} \n\n\nif (correct_bracketing(\"<\")) {\n    System.out.println(\"Test 1 failed\");\n} else {\n    System.out.println(\"Test 1 passed\");\n}\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/130", "completion": "\n\n\n\n\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class Solution {\n    public static long getSumOfSquares(List<Double> lst) {\n        \n        List<Long> roundedList = lst.stream()\n                                     .map(Math::ceil)\n                                     .mapToLong(Double::longValue)\n                                     .boxed()\n                                     .collect(Collectors.toList());\n\n        \n        List<Long> squaredList = roundedList.stream()\n                                             .map(num -> num * num)\n                                             .collect(Collectors.toList());\n\n        \n        long sumOfSquares = squaredList.stream()\n                                        .mapToLong(Long::longValue)\n                                        .sum();\n\n        return sumOfSquares;\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(getSumOfSquares(Arrays.asList(1.0, 2.0, 3.0))); \n        System.out.println(getSumOfSquares(Arrays.asList(1.0, 4.0, 9.0))); \n        System.out.println(get", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/39", "completion": "\n\n\n\n\npublic int numberOfCollisions(int[] cars) {\n    \n    int collisionCount = 0;\n\n    \n    for (int i = 0; i < cars.length; i++) {\n        \n        if (cars[i] > 0) {\n            collisionCount++;\n        }\n    }\n\n    \n    return collisionCount;\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/13", "completion": "\n\n\n\n\npublic int greatest_common_divisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/104", "completion": "\n\n\n\n\npublic class Solution {\n    public int[] countPalindrome(int n) {\n        \n        int[] result = new int[2];\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    result[0]++;\n                } else {\n                    result[1]++;\n                }\n            }\n        }\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/56", "completion": "\n\n\n\n\npublic int largest_prime_factor(int n) {\n    \n    int factor = 2;\n    \n    \n    while (n % factor == 0) {\n        n /= factor;\n    }\n    \n    \n    factor++;\n    \n    \n    while (n > 1) {\n        if (n % factor == 0) {\n            n /= factor;\n        } else {\n            factor++;\n        }\n    }\n    \n    \n    return factor;\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/1", "completion": "\n\n\n\n\nimport java.util.ArrayList;\nimport java.util.Stack;\n\npublic class Solution {\n    public ArrayList<String> separate_paren_groups(String s) {\n        \n        s = s.replaceAll(\"\\\\s\", \"\");\n\n        ArrayList<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n\n        int start = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                stack.pop();\n\n                if (stack.isEmpty()) {\n                    \n                    result.add(s.substring(start, i + 1));\n                    start = i + 1;\n                }\n            }\n        }\n\n        return result;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/66", "completion": "\n\n\n\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class FrequencyFinder {\n    public static int search(int[] nums) {\n        \n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        \n        for (int num : nums) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        \n        int result = -1;\n        \n        \n        for (int num = nums.length; num > 0; num--) {\n            \n            if (frequencyMap.getOrDefault(num, 0) >= num) {\n                \n                result = num;\n                break; \n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(search(new int[]{4, 1, 2, 2, 3, 1})); ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/151", "completion": "\n\n\n\n\npublic boolean cycpattern_check(String str1, String str2) {\n    \n    for (int i = 0; i < str2.length(); i++) {\n        String rotatedStr2 = rotateString(str2, i);\n        if (str1.contains(rotatedStr2)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/122", "completion": "\n\n\n\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class SplitWords {\n    public static ArrayList<String> splitWords(String text) {\n        \n        String[] wordsWithWhitespace = text.split(\"\\\\s+\");\n        if (wordsWithWhitespace.length > 0) {\n            return new ArrayList<>(Arrays.asList(wordsWithWhitespace));\n        }\n\n        \n        String[] wordsWithCommas = text.split(\",\");\n        if (wordsWithCommas.length > 0) {\n            return new ArrayList<>(Arrays.asList(wordsWithCommas));\n        }\n\n        \n        int count = 0;\n        for (char c : text.toCharArray()) {\n            if (Character.isLowerCase(c) && ((c - 'a') % 2 != 0)) {\n                count++;\n            }\n        }\n        return new ArrayList<>(Arrays.asList(String.valueOf(count)));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(splitWords(\"Hello world!\")); \n        System.out.println(splitWords(\"Hello,world!\")); \n        System.out.println(splitWords(\"abcdef\")); \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/5", "completion": "\n\n\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Intersperse {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        \n        List<Integer> result = new ArrayList<>();\n\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            \n            result.add(numbers.get(i));\n\n            \n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(intersperse(new ArrayList<>(), 4)); \n        System.out.println(intersperse(new ArrayList<>(List.of(1, 2, 3)), 4)); \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/142", "completion": "\n\n\n\n\nimport java.util.*;\n\npublic class Solution {\n    public static List<Integer> order_by_points(List<Integer> nums) {\n        \n        Comparator<Integer> digitSumComparator = (num1, num2) -> {\n            int sum1 = getDigitSum(num1);\n            int sum2 = getDigitSum(num2);\n\n            if (sum1 != sum2) {\n                return Integer.compare(sum1, sum2);\n            } else {\n                return Integer.compare(nums.indexOf(num1), nums.indexOf(num2));\n            }\n        };\n\n        \n        Collections.sort(nums, digitSumComparator);\n\n        return nums;\n    }\n\n    private static int getDigitSum(int num) {\n        int sum = 0;\n        while (num != 0) {\n            sum += Math.abs(num % 10);\n            num /= 10;\n        }\n        return sum;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/48", "completion": "\n\n\n\n\npublic class RemoveVowels {\n    public static String remove_vowels(String s) {\n        \n        StringBuilder result = new StringBuilder();\n\n        \n        String vowels = \"aeiouAEIOU\";\n\n        \n        for (char c : s.toCharArray()) {\n            \n            if (!vowels.contains(String.valueOf(c))) {\n                \n                result.append(c);\n            }\n        }\n\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(remove_vowels(\"\")); \n        System.out.println(remove_vowels(\"abcdef\\nghijklm\")); \n        System.out.println(remove_vowels(\"abcdef\")); \n        System.out.println(remove_vowels(\"aaaaa\")); \n        System.out.println(remove_vowels(\"aaBAA\")); \n        System.out.println(remove_vow", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/155", "completion": "\n\n\n\n\nimport java.util.*;\n\npublic class MaxUniqueChars {\n    public static String findMax(String[] arr) {\n        \n        Map<String, Set<Character>> uniqueCharCount = new HashMap<>();\n\n        \n        for (String str : arr) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : str.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            uniqueCharCount.put(str, uniqueChars);\n        }\n\n        \n        \n        Arrays.sort(arr, (a, b) -> {\n            int sizeA = uniqueCharCount.get(a).size();\n            int sizeB = uniqueCharCount.get(b).size();\n\n            if (sizeA == sizeB) {\n                return a.compareTo(b);\n            } else {\n                return sizeB - sizeA;\n            }\n        });\n\n        \n        return arr[0];\n    }\n\n    public static void main(String[] args) {\n        String[] arr1 = {\"name\", \"of", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/125", "completion": "\n\n\n    if (arr.isEmpty()) {\n        return null;\n    }\n\n    var magnitudeSum = 0;\n    var signProduct = 1;\n\n    for (num in arr) {\n        if (num != 0) {\n            magnitudeSum += Math.abs(num);\n            signProduct *= if (num > 0) 1 else -1;\n        }\n    }\n\n    return magnitudeSum * signProduct;\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/149", "completion": "\n\n\n\n\npublic int[] compare(int[] scores, int[] guesses) {\n    \n    int[] differences = new int[scores.length];\n\n    \n    for (int i = 0; i < scores.length; i++) {\n        \n        differences[i] = Math.abs(scores[i] - guesses[i]);\n    }\n\n    \n    return differences;\n} \n\n\npublic static void main(String[] args) {\n    int[] scores = {1, 2, 3, 4, 5, 1};\n    int[] guesses = {1, 2, 3, 4, 2, -2};\n    int[] result = compare(scores, guesses);\n    System.out.println(Arrays.toString(result)); \n\n    int[] scores2 = {0, 5, 0, 0, 0, 4};\n    int[] guesses2 = {4, 1, 1, 0, ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/139", "completion": "\n\n\n\n\nimport java.util.List;\n\npublic class Solution {\n    public static int sum(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i != 0) {\n                sum += Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += Math.pow(lst.get(i), 3);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/131", "completion": "\n\n\n\n\npublic class Solution {\n    public boolean checkIfLastCharIsALetter(String str) {\n        \n        if (str.isEmpty() || str.charAt(str.length() - 1) != ' ') {\n            return false;\n        }\n\n        \n        str = str.trim();\n\n        \n        char lastChar = str.charAt(str.length() - 1);\n\n        \n        return Character.isLetter(lastChar);\n    }\n} \n\n\npublic class Test {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); \n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); \n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); \n        System.out.println(solution.checkIfLastCharIsALetter(\"\")); \n    }\n} \n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/156", "completion": "\n\n\n\n\nclass Solution {\n    public int[] eat(int number, int need, int remaining) {\n        \n        int total = number + Math.min(need, remaining);\n        int left = Math.max(0, remaining - need);\n        return new int[]{total, left};\n    }\n} \n\n\nif (Solution.class.isAssignableFrom(this.getClass())) {\n    Solution solution = new Solution();\n    System.out.println(Arrays.toString(solution.eat(5, 6, 10)));\n    System.out.println(Arrays.toString(solution.eat(4, 8, 9)));\n    System.out.println(Arrays.toString(solution.eat(1, 10, 10)));\n    System.out.println(Arrays.toString(solution.eat(2, 11, 5)));\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/41", "completion": "\n\n\n\n\npublic boolean pairs_sum_to_zero(List<Integer> nums) {\n    \n    Set<Integer> seen = new HashSet<>();\n    \n    \n    for (int num : nums) {\n        \n        if (seen.contains(-num)) {\n            \n            return true;\n        }\n        \n        seen.add(num);\n    }\n    \n    \n    \n    return false;\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/110", "completion": "\n\n\n\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class OddCount {\n    public static List<String> odd_count(List<String> nums) {\n        \n        List<String> result = new ArrayList<>();\n\n        \n        for (String num : nums) {\n            int count = 0;\n\n            \n            for (char c : num.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n\n            \n            String formattedResult = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            result.add(formattedResult);\n        }\n\n        return result;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/28", "completion": "\n\n\n\n\npublic class Concatenate {\n    public static String concatenate(String[] arr) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : arr) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(concatenate(new String[]{})); \n        System.out.println(concatenate(new String[]{\"a\", \"b\", \"c\"})); \n    }\n} \n\n\n\n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/114", "completion": "\n\n\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ConsonantWords {\n\n    public static List<String> select_words(String s, int n) {\n        \n        String[] words = s.split(\"\\\\s+\");\n\n        \n        List<String> result = new ArrayList<>();\n\n        \n        for (String word : words) {\n            \n            int count = 0;\n            for (char c : word.toLowerCase().toCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') continue;\n                count++;\n            }\n\n            \n            if (count == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(select_words(\"Mary had a little lamb\", 4)); \n        System.out.println(select_words(\"Mary had a little lamb\", 3)); \n       ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/45", "completion": "\n\n\n\n\nimport java.util.Arrays;\n\npublic class Solution {\n    public static double median(int[] l) {\n        \n        Arrays.sort(l);\n\n        int n = l.length;\n        if (n % 2 == 0) {\n            \n            return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n        } else {\n            \n            return l[n / 2];\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] testArray1 = {3, 1, 2, 4, 5};\n        System.out.println(median(testArray1)); \n\n        int[] testArray2 = {-10, 4, 6, 1000, 10, 20};\n        System.out.println(median(testArray2)); \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/116", "completion": "\n\n\n\n\npublic class Solution {\n    public String match_parens(String[] parens) {\n        \n        int open = 0;\n        for (String paren : parens) {\n            for (char c : paren.toCharArray()) {\n                if (c == '(') {\n                    open++;\n                } else {\n                    open--;\n                }\n                if (open < 0) {\n                    return \"No\";\n                }\n            }\n        }\n        return open == 0 ? \"Yes\" : \"No\";\n    }\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/147", "completion": "\n\n\n\n\npublic class XOrY {\n    public static int x_or_y(int n, int x, int y) {\n        \n        if (isPrime(n)) {\n            return x; \n        } else {\n            return y; \n        }\n    }\n\n    \n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false; \n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false; \n            }\n        }\n        return true; \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/117", "completion": "\n\n\n\n\nimport java.util.Arrays;\nimport java.util.Collections;\n\npublic class Solution {\n    public int[] maxKNumbers(int[] arr, int k) {\n        \n        Arrays.sort(arr);\n        \n        Collections.reverse(Arrays.asList(arr));\n        \n        int[] result = new int[k];\n        \n        for (int i = 0; i < k; i++) {\n            result[i] = arr[i];\n        }\n        \n        return result;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/109", "completion": "\n\n\n\n\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass Solution {\n    public static boolean isPalindrome(String str) {\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static String[] removeCharsAndCheckPalindrome(String s, String c) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!c.contains(String.valueOf(ch))) {\n                result.append(ch);\n            }\n        }\n\n        String resultString = result.toString();\n        boolean isPalindromic = isPalindrome(resultString);\n\n        return new String[]{resultString, String.valueOf(isPalindromic)};\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/112", "completion": "\n\n\n\n\nclass Solution {\n    public int minimumWaterExtraction(int[][] wells, int bucketCapacity) {\n        \n        int rows = wells.length;\n        int cols = wells[0].length;\n        int maxWater = 0;\n\n        \n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (wells[i][j] > maxWater) {\n                    maxWater = wells[i][j];\n                }\n            }\n        }\n\n        int totalExtractions = 0;\n\n        \n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                totalExtractions += wells[i][j];\n            }\n        }\n\n        return totalExtractions / bucketCapacity;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/55", "completion": "\n\n\n\n\nimport java.util.*;\n\npublic class Solution {\n    public static List<Integer> common(List<Integer> a, List<Integer> b) {\n        \n        Set<Integer> setA = new HashSet<>(a);\n        Set<Integer> setB = new HashSet<>(b);\n\n        setA.retainAll(setB);\n\n        List<Integer> result = new ArrayList<>(setA);\n        Collections.sort(result);\n\n        return result;\n    }\n} \n\n\n\nclass Main {\n    public static void main(String[] args) {\n        System.out.println(common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121)));\n        System.out.println(common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2)));\n    }\n\n    public static List<Integer> common(List<Integer> a, List<Integer> b) {\n        return Solution.common(a, b);\n    }\n} \n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/36", "completion": "\n\n\n\n\nimport java.util.Arrays;\nimport java.util.Collections;\n\npublic class SortEven {\n    public static void main(String[] args) {\n        \n        System.out.println(sortEven(new int[]{1, 2, 3}));\n        System.out.println(sortEven(new int[]{5, 6, 3, 4}));\n    }\n\n    public static int[] sortEven(int[] l) {\n        \n        ArrayList<Integer> evenIndices = new ArrayList<>();\n        for (int i = 0; i < l.length; i += 2) {\n            evenIndices.add(l[i]);\n        }\n        \n        Collections.sort(evenIndices);\n        \n        int[] result = new int[l.length];\n        \n        for (int i = 1; i < l.length; i += 2) {\n            result[i] = l[i];\n        }\n        \n        for (int i = 0; i < evenIndices.size(); i++) {\n            result[i * 2] = evenIndices.get(i);\n        }\n        return result;\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/68", "completion": "\n\n\n\n\npublic class TriangleArea {\n    public static double triangle_area(int a, int b, int c) {\n        \n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n\n        \n        double s = (a + b + c) / 2.0;\n\n        \n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n        \n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/60", "completion": "\n\n\n\n\npublic class Solution {\n    public static int fibfib(int n) {\n        if (n < 2) return 0;\n        if (n == 2) return 1;\n\n        int[] dp = new int[n+1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n        }\n\n        return dp[n];\n    }\n} \n\n\nSystem.out.println(fibfib(1)); \nSystem.out.println(fibfib(5)); \nSystem.out.println(fibfib(8)); \n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/101", "completion": "\n\n\n\n\nimport java.util.*;\n\npublic class UniqueDigits {\n    public static List<Integer> unique_digits(List<Integer> x) {\n        \n        List<Integer> result = new ArrayList<>();\n        for (int num : x) {\n            if (hasNoEvenDigits(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private static boolean hasNoEvenDigits(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> test1 = Arrays.asList(15, 33, 1422, 1);\n        System.out.println(unique_digits(test1)); \n\n        List<Integer> test2 = Arrays.asList(152, 323, 1422, 10);\n        System.out.println(unique_digits(test2)); \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/19", "completion": "\n\n\n\n\npublic class SortNumbers {\n    public static String sort_numbers(String input) {\n        \n        String[] words = input.split(\" \");\n        \n        \n        int[] numbers = new int[words.length];\n        \n        \n        for (int i = 0; i < words.length; i++) {\n            switch (words[i]) {\n                case \"zero\":\n                    numbers[i] = 0;\n                    break;\n                case \"one\":\n                    numbers[i] = 1;\n                    break;\n                case \"two\":\n                    numbers[i] = 2;\n                    break;\n                case \"three\":\n                    numbers[i] = 3;\n                    break;\n                case \"four\":\n                    numbers[i] = 4;\n                    break;\n                case \"five\":\n                    numbers[i] = 5;\n                    break;\n                case \"six\":\n                    numbers[i] = 6;\n                    break;\n                case \"seven\":\n                    numbers[i] = 7;\n                    break;\n                case \"eight\":\n                    numbers[i] = 8;\n                    break;\n                case \"nine\":\n                    numbers[i] = 9;\n                    break;\n            }\n       ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/97", "completion": "\n\n\n\n\npublic class Solution {\n    public List<Integer> make_a_pile(int n) {\n        \n        List<Integer> result = new ArrayList<>();\n        \n        \n        int currentStones = n;\n        \n        \n        for (int i = 0; i < n; i++) {\n            \n            result.add(currentStones);\n            \n            \n            \n            currentStones += (currentStones % 2 == 0) ? 2 : 2;\n        }\n        \n        return result;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/126", "completion": "\n\n\n\n\nimport java.util.*;\n\nclass Solution {\n    public int[] minPath(int[][] grid, int k) {\n        \n    }\n} \n\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[][] grid = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                grid[i][j] = sc.nextInt();\n            }\n        }\n        int k = sc.nextInt();\n        Solution sol = new Solution();\n        int[] result = sol.minPath(grid, k);\n        for (int num : result) {\n            System.out.print(num + \" \");\n        }\n    }\n} \n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/134", "completion": "\n\n\n    return when {\n        a is Int && b is Int -> if (a > b) a else if (b > a) b else null\n        a is Float && b is Float -> if (a > b) a else if (b > a) b else null\n        a is String && b is String -> if (a.toDouble() > b.toDouble()) a else if (b.toDouble() > a.toDouble()) b else null\n        a is String && b is Int -> if (a.toDouble() > b) a else if (b > a.toDouble()) b else null\n        a is Int && b is String -> if (a > b.toDouble()) a else if (b.toDouble() > a) b else null\n        else -> null\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/136", "completion": "\n\n\n\n\npublic class Solution {\n    public static long specialFactorial(int n) {\n        \n        if (n == 1) {\n            return 1;\n        }\n        return n * specialFactorial(n - 1);\n    }\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/7", "completion": "\n\n\n\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Solution {\n    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        \n        List<String> filteredStrings = new ArrayList<>();\n\n        \n        for (String str : strings) {\n            \n            if (str.contains(substring)) {\n                \n                filteredStrings.add(str);\n            }\n        }\n\n        \n        return filteredStrings;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/47", "completion": "\n\n\n\n\npublic class ModP {\n    public static int modp(int n, int p) {\n        if(n == 0){\n            return 1;\n        }\n        int result = 1;\n        for(int i = 0; i < n; i++){\n            result = (result * 2) % p;\n        }\n        return result;\n    }\n} \n\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(ModP.modp(3, 5)); \n        System.out.println(ModP.modp(1101, 101)); \n        System.out.println(ModP.modp(0, 101)); \n        System.out.println(ModP.modp(3, 11)); \n        System.out.println(ModP.modp(100, 101)); \n    }\n} \n\n\n\n\n\n\n\n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/8", "completion": "\n\n\n\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic class SumProductCalculator {\n\n    public static Tuple<Integer, Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return new Tuple<>(sum, product);\n    }\n\n    \n    public static class Tuple<X, Y> {\n        private final X x;\n        private final Y y;\n\n        public Tuple(X x, Y y) {\n            this.x = x;\n            this.y = y;\n        }\n\n        public X getX() {\n            return x;\n        }\n\n        public Y getY() {\n            return y;\n        }\n\n        @Override\n        public String toString() {\n            return \"(\" + x + \", \" + y + \")\";\n        }\n    }\n\n    \n    public static void main(String[] args) {\n        System.out.println(sum_product(new ArrayList<>()).equals(new Tuple<>(0, 1))); \n        System.out.println(sum_product(Arrays.asList(1, 2, 3, 4)).equals(new Tuple<>(10, 24))); \n    }\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/25", "completion": "\n\n\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PrimeFactorization {\n\n    public static List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/69", "completion": "\n\n\n\n\npublic class WillItFly {\n    public static boolean willItFly(List<Integer> q, int w) {\n        \n        if (q.isEmpty() || q.size() == 1) {\n            return true;\n        }\n\n        \n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        \n        return sum <= w && isBalanced(q);\n    }\n\n    private static boolean isBalanced(List<Integer> q) {\n        \n        List<Integer> copy = new ArrayList<>(q);\n\n        \n        while (!copy.isEmpty()) {\n            if (!copy.get(0).equals(copy.get(copy.size() - 1))) {\n                return false;\n            }\n            copy.remove(0);\n            copy.remove(copy.size() - 1);\n        }\n\n        return true;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/52", "completion": "\n\n\n\n\npublic class Solution {\n    public static int fib(int n) {\n        if (n <= 1) return n;\n        int a = 0, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n} \n\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(fib(10));\n        System.out.println(fib(1));\n        System.out.println(fib(8));\n    }\n\n    public static int fib(int n) {\n        return Solution.fib(n);\n    }\n} \n\n\n\n\n\n\n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/6", "completion": "\n\n\n\n\nimport java.util.Stack;\n\npublic class Solution {\n    public static int[] parse_nested_parens(String input) {\n        \n        String[] groups = input.split(\" \");\n        int[] depths = new int[groups.length];\n\n        for (int i = 0; i < groups.length; i++) {\n            Stack<Character> stack = new Stack<>();\n            int maxDepth = 0;\n            for (char c : groups[i].toCharArray()) {\n                if (c == '(') {\n                    stack.push(c);\n                    maxDepth = Math.max(maxDepth, stack.size());\n                } else if (c == ')') {\n                    stack.pop();\n                }\n            }\n            depths[i] = maxDepth;\n        }\n\n        return depths;\n    }\n\n    public static void main(String[] args) {\n        String input = \"(()()) ((())) () ((())()())\";\n        int[] result = parse_nested_parens(input);\n        for (int depth : result) {\n            System.out.println(depth);\n        }\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/73", "completion": "\n\n\n\n\npublic class SimplePower {\n    public static boolean isSimplePower(int x, int n) {\n        \n        return Math.pow(n, (int) Math.round(Math.log(x) / Math.log(n))) == x;\n    }\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/83", "completion": "\n\n\n\n\npublic class AntiShuffle {\n\n    public static String anti_shuffle(String str) {\n        \n        String[] words = str.split(\" \");\n        \n        \n        StringBuilder result = new StringBuilder();\n        \n        \n        for (String word : words) {\n            \n            char[] chars = word.toCharArray();\n            \n            \n            Arrays.sort(chars);\n            \n            \n            result.append(new String(chars));\n            \n            \n            result.append(\" \");\n        }\n        \n        \n        return result.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(anti_shuffle(\"Hi\")); \n        System.out.println(anti_shuffle(\"hello\")); \n        System.out.println(anti_shuffle(\"Hello World!!!\")); \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/22", "completion": "\n\n\n\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Solution {\n    public static List<Integer> filter_integers(List<Object> input) {\n        List<Integer> result = new ArrayList<>();\n        for (Object item : input) {\n            if (item instanceof Integer) {\n                result.add((Integer) item);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(filter_integers(new ArrayList<>(List.of('a', 3.14, 5)))); \n        System.out.println(filter_integers(new ArrayList<>(List.of(1, 2, 3, 'abc', new Object(), new ArrayList<>())))); \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/26", "completion": "\n\n\n\n\nimport java.util.*;\n\npublic class RemoveDuplicates {\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        \n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : numbers) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        \n        List<Integer> result = new ArrayList<>();\n        for (int num : numbers) {\n            if (frequencyMap.get(num) == 1) {\n                result.add(num);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 4);\n        System.out.println(removeDuplicates(numbers));\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/105", "completion": "\n\n\n\n\npublic class CountNums {\n    public static int count_nums(int[] nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (sum_of_digits(num) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private static int sum_of_digits(int num) {\n        int sum = 0;\n        boolean isNegative = num < 0;\n        while (num != 0) {\n            int digit = num % 10;\n            sum += digit * (isNegative ? -1 : 1);\n            num /= 10;\n        }\n        return sum;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/35", "completion": "\n\n\n\n\npublic int fizz_buzz(int n) {\n    int count = 0;\n    for (int i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            String num = Integer.toString(i);\n            for (int j = 0; j < num.length(); j++) {\n                if (num.charAt(j) == '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n} \n\n\npublic static void main(String[] args) {\n    System.out.println(fizz_buzz(50)); \n    System.out.println(fizz_buzz(78)); \n    System.out.println(fizz_buzz(79)); \n} \n\n\n} \n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/30", "completion": "\n\n\n\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class PositiveNumbers {\n    public static List<Integer> get_positive(List<Integer> nums) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num > 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n\n    \n    public static void main(String[] args) {\n        System.out.println(get_positive(new ArrayList<>(List.of(-1, 2, -4, 5, 6))).equals(new ArrayList<>(List.of(2, 5, 6))));\n        System.out.println(get_positive(new ArrayList<>(List.of(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))).equals(new ArrayList<>(List.of(5, 3, 2, 3, 9, 123, 1))));\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/80", "completion": "\n\n\n\n\npublic class Solution {\n    public int countNumbersWith1AsDigit(int n) {\n        \n        if (n == 1) {\n            return 1;\n        }\n        \n        \n        \n        \n        \n        \n        return 2 * (int)Math.pow(10, n - 1) - 10;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/11", "completion": "\n\n\n\n\npublic class Solution {\n    public String string_xor(String a, String b) {\n        \n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < a.length(); i++){\n            if(a.charAt(i) == b.charAt(i)){\n                sb.append(\"0\");\n            } else {\n                sb.append(\"1\");\n            }\n        }\n        return sb.toString();\n    }\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/2", "completion": "\n\n\n\n\npublic class Solution {\n    public static double truncate_number(double num) {\n        \n        return num - Math.floor(num);\n    }\n} \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/138", "completion": "\n\n\n\n\npublic class FileChecker {\n    public String file_name_check(String fileName) {\n        \n        int digitCount = 0;\n        for (char c : fileName.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n                if (digitCount > 3) {\n                    return \"No\";\n                }\n            }\n        }\n\n        \n        int dotCount = 0;\n        for (char c : fileName.toCharArray()) {\n            if (c == '.') {\n                dotCount++;\n            }\n        }\n        if (dotCount != 1) {\n            return \"No\";\n        }\n\n        \n        int dotIndex = fileName.indexOf('.');\n        String extension = fileName.substring(dotIndex + 1);\n        if (!extension.equals(\"txt\") && !extension.equals(\"exe\") && !extension.equals(\"dll\")) {\n            return \"No\";\n        }\n\n        \n        char firstChar = fileName.charAt(0);\n        if (!Character.isLetter(firstChar)) {\n            return \"No\";\n        }\n\n        \n        return \"Yes\";\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/37", "completion": "\n\n\n\n\nimport java.util.*;\nimport java.math.*;\n\npublic class Solution {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        System.out.println(prime_fib(n));\n    }\n\n    public static BigInteger prime_fib(int n) {\n        \n        if (n == 1) return new BigInteger(\"2\");\n        if (n == 2) return new BigInteger(\"3\");\n\n        BigInteger prev = new BigInteger(\"2\");\n        BigInteger current = new BigInteger(\"3\");\n        int count = 2;\n\n        while (count < n) {\n            BigInteger next = current.add(prev);\n            prev = current;\n            current = next;\n\n            if (isPrime(next)) {\n                count++;\n            }\n        }\n\n        return current;\n    }\n\n    private static boolean isPrime(BigInteger num) {\n        if (num.compareTo(new BigInteger(\"2\")) < 0) return false;\n        if (num.mod(new BigInteger(\"2\")).equals(BigInteger.ZERO)) return num.equals(new BigInteger(\"2\"));\n\n        for (BigInteger i = new BigInteger(\"3\"); i.multiply(i).compareTo(num) <= 0; i = i.add(new BigInteger(\"2\"))) {\n            if (num.mod(i).", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/24", "completion": "\n\n\n\n\npublic int largest_divisor(int n) {\n    for (int i = n - 1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1; \n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/145", "completion": "\n\n\n\n\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Planets {\n    public static List<String> betweenPlanets(String planet1, String planet2) {\n        \n        List<String> planets = new ArrayList<>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        ));\n        \n        \n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        \n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        \n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        \n        \n        return new ArrayList<>(planets.subList(index1 + 1, index2));\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/120", "completion": "\n\n\n\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Solution {\n    public ArrayList<Integer> get_odd_collatz(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 == 1) {\n                result.add(n);\n            }\n            n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n        }\n        result.add(1); \n        Collections.sort(result); \n        return result;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/76", "completion": "\n\n\n\n\npublic class Solution {\n    public static String decimal_to_binary(int n) {\n        \n        String binary = Integer.toBinaryString(n);\n        \n        \n        return \"db\" + binary + \"db\";\n    }\n} \n\n\nSystem.out.println(decimal_to_binary(15));  \nSystem.out.println(decimal_to_binary(32));  \nSystem.out.println(decimal_to_binary(47));  \nSystem.out.println(decimal_to_binary(100)); \nSystem.out.println(decimal_to_binary(255)); \nSystem.out.println(decimal_to_binary(0));   \nSystem.out.println(decimal_to_binary(1));   \nSystem.out.println(decimal_to_binary(2));   \nSystem.out.println(decimal_to_binary(3", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/15", "completion": "\n\n\n\n\npublic class Solution {\n    public String string_sequence(int n) {\n        \n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            if (i != 0) {\n                sb.append(\" \");\n            }\n            sb.append(i);\n        }\n        return sb.toString();\n    }\n} \n\n\n\n\n\n\n\n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/107", "completion": "\n\n\n\n\npublic class Exchange {\n\n    public static String exchange(int[] lst1, int[] lst2) {\n        \n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                \n                for (int num2 : lst2) {\n                    if (num2 % 2 == 0) {\n                        return \"YES\";\n                    }\n                }\n                \n                return \"NO\";\n            }\n        }\n        \n        return \"YES\";\n    }\n\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/16", "completion": "\n\n\n\n\npublic int count_distinct_characters(String s) {\n    \n    String lowerCaseString = s.toLowerCase();\n\n    \n    HashSet<Character> uniqueCharacters = new HashSet<>();\n\n    \n    for (char c : lowerCaseString.toCharArray()) {\n        \n        uniqueCharacters.add(c);\n    }\n\n    \n    return uniqueCharacters.size();\n} \n\n\npublic static void main(String[] args) {\n    System.out.println(count_distinct_characters(\"xyzXYZ\")); \n    System.out.println(count_distinct_characters(\"Jerry\")); \n} \n\n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/61", "completion": "\n\n\n\n\npublic class Solution {\n    public int vowels_count(String word) {\n        \n        int count = 0;\n        for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n            if (c == 'y' || c == 'Y') {\n                if (i == word.length() - 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/115", "completion": "\n\n\n\n\npublic class Solution {\n    public String get_closest_vowel(String str) {\n        \n        int len = str.length();\n        for(int i = len - 1; i > 0; i--) {\n            char c = str.charAt(i);\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                int j = i - 1;\n                while(j >= 0 && !isVowel(str.charAt(j))) {\n                    j--;\n                }\n                if(j >= 0 && isVowel(str.charAt(j))) {\n                    return String.valueOf(c);\n                }\n            }\n        }\n        return \"\";\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/111", "completion": "\n\n\n\n\npublic class MinSubArraySum {\n    public static int minSubArraySum(int[] nums) {\n        \n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n\n        \n        for (int i = 0; i < nums.length; i++) {\n            \n            currentSum += nums[i];\n\n            \n            if (currentSum < minSum) {\n                minSum = currentSum;\n            }\n\n            \n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n\n        return minSum;\n    }\n\n    public static void main(String[] args) {\n        int[] nums1 = {2, 3, 4, 1, 2, 4};\n        System.out.println(minSubArraySum(nums1)); \n\n        int[] nums2 = {-1, -2, -3};\n        System.out.println(minSubArraySum(nums2)); ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/82", "completion": "\n\n\n\n\npublic class Solution {\n    public static int add(int[] lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.length; i += 2) {\n            if (lst[i] % 2 == 0) {\n                sum += lst[i];\n            }\n        }\n        return sum;\n    }\n} \n\n\nSystem.out.println(Solution.add(new int[]{4, 2, 6, 7})); \nSystem.out.println(Solution.add(new int[]{1, 3, 5, 7, 9})); \nSystem.out.println(Solution.add(new int[]{2, 4, 6, 8, 10})); \nSystem.out.println(Solution.add(new int[]{10, 20, 30, 40, 50})); \nSystem.out.println(Solution.add(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})); \nSystem.out.println(S", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/49", "completion": "\n\n\n\n\npublic boolean below_threshold(List<Integer> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n} \n\n\npublic static void main(String[] args) {\n    System.out.println(below_threshold(Arrays.asList(1, 2, 4, 10), 100)); \n    System.out.println(below_threshold(Arrays.asList(1, 20, 4, 10), 5)); \n} \n\n\n\n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/29", "completion": "\n\n\n\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Solution {\n    public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n        \n        List<String> filteredStrings = new ArrayList<>();\n\n        \n        for (String str : strings) {\n            \n            if (str.startsWith(prefix)) {\n                \n                filteredStrings.add(str);\n            }\n        }\n\n        \n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(filter_by_prefix(new ArrayList<>(), \"a\")); \n        System.out.println(filter_by_prefix(new ArrayList<>(List.of(\"abc\", \"bcd\", \"cde\", \"array\")), \"a\")); \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/144", "completion": "\n\n\n\n\nclass Solution {\n    public int countTriples(int n) {\n        \n        int[] a = new int[n];\n        \n        \n        for (int i = 1; i <= n; i++) {\n            a[i-1] = i * i - i + 1;\n        }\n        \n        int count = 0;\n        \n        \n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    \n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/86", "completion": "\n\n\n\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(encrypt(\"hi\"));\n        System.out.println(encrypt(\"asdfghjkl\"));\n        System.out.println(encrypt(\"gf\"));\n        System.out.println(encrypt(\"et\"));\n    }\n\n    \n    public static String encrypt(String str) {\n        \n        StringBuilder encrypted = new StringBuilder();\n\n        \n        for (char c : str.toCharArray()) {\n            \n            if (c >= 'a' && c <= 'z') {\n                \n                char newChar = (char) ((c - 'a' + 4) % 26 + 'a');\n                \n                encrypted.append(newChar);\n            } else {\n                \n                encrypted.append(c);\n            }\n        }\n\n        \n        return encrypted.toString();\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/23", "completion": "\n\n\n\n\npublic class Solution {\n    public static int strlen(String str) {\n        return str.length();\n    }\n} \n\n\n\nclass Main {\n    public static void main(String[] args) {\n        System.out.println(strlen(\"\"));\n        System.out.println(strlen(\"abc\"));\n    }\n\n    public static int strlen(String str) {\n        return Solution[strlen(str)];\n    }\n} \n\n\n\n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/135", "completion": "\n\n\n\n\npublic class Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        \n        if (n < 8) {\n            return false;\n        }\n        \n        if (n % 2 != 0) {\n            return false;\n        }\n        \n        return true;\n    }\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/72", "completion": "\n\n\n\n\npublic class Main {\n    public static boolean is_multiply_prime(int a) {\n        \n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(is_multiply_prime(30)); \n        System.out.println(is_multiply_prime(60)); \n        System.out.println(is_multiply_prime(49)); \n        System.out.println(is_multiply_prime(100)); \n    }\n} \n\n\n\n\n\n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/59", "completion": "\n\n\n\n\npublic class Solution {\n    public static int[] derivative(int[] xs) {\n        \n        int[] result = new int[xs.length - 1];\n        for (int i = 1; i < xs.length; i++) {\n            result[i-1] = xs[i] * i;\n        }\n        return result;\n    }\n} \n\n\n\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] xs = {3, 1, 2, 4, 5};\n        int[] result = Solution.derivative(xs);\n        for (int i : result) {\n            System.out.print(i + \" \");\n        }\n        System.out.println();\n    }\n} \n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/10", "completion": "\n\n\n\n\npublic class Solution {\n    public String makePalindrome(String s) {\n        if (s == null || s.length() == 0) return s;\n        int i = 0, j = s.length() - 1;\n        while (i < j && s.charAt(i) == s.charAt(j)) {\n            i++;\n            j--;\n        }\n        if (i >= j) return s;\n        return s + new StringBuilder(s.substring(0, i)).reverse().toString();\n    }\n} \n\n\nSystem.out.println(make_palindrome(\"\")); \nSystem.out.println(make_palindrome(\"cat\")); \nSystem.out.println(make_palindrome(\"cata\")); ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/103", "completion": "\n\n\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution {\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumToI(i));\n            }\n        }\n        return result;\n    }\n\n    private static int factorial(int n) {\n        int fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    private static int sumToI(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/108", "completion": "\n\n\n\n\nimport java.util.*;\n\npublic class Histogram {\n    public static Map<String, Integer> histogram(String s) {\n        \n        if (s.isEmpty()) {\n            return new HashMap<>();\n        }\n\n        String[] words = s.split(\" \");\n        Map<String, Integer> frequencyMap = new HashMap<>();\n\n        for (String word : words) {\n            frequencyMap.put(word, frequencyMap.getOrDefault(word, 0) + 1);\n        }\n\n        int maxFrequency = Collections.max(frequencyMap.values());\n\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getValue() == maxFrequency) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/146", "completion": "\n\n\n\n\nimport java.util.*;\n\npublic class Solution {\n    public static List<String> list_sort(List<String> list) {\n        \n        list.removeIf(s -> s.length() % 2 != 0);\n\n        \n        Collections.sort(list, (s1, s2) -> {\n            if (s1.length() == s2.length()) {\n                return s1.compareTo(s2);\n            }\n            return Integer.compare(s1.length(), s2.length());\n        });\n\n        return list;\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(list_sort(Arrays.asList(\"aa\", \"a\", \"aaa\"))); \n        System.out.println(list_sort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\"))); \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/38", "completion": "\n\n\n\n\nimport java.util.*;\n\npublic class Solution {\n    public static boolean triples_sum_to_zero(List<Integer> arr) {\n        \n        int n = arr.size();\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (arr.get(i) + arr.get(j) + arr.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr1 = Arrays.asList(1, 3, 5, 0);\n        System.out.println(triples_sum_to_zero(arr1)); \n\n        List<Integer> arr2 = Arrays.asList(1, 3, -2, 1);\n        System.out.println(triples_sum_to_zero(arr2)); \n\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 7);\n        System.out.println(triples_sum_to_zero(arr3)); ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/143", "completion": "\n\n\n\n\npublic class Solution {\n    public static int specialFilter(int[] nums) {\n        \n        return 0;\n    }\n} \n\n\nSystem.out.println(specialFilter(new int[]{15, -73, 14, -15})); \nSystem.out.println(specialFilter(new int[]{33, -2, -3, 45, 21, 109})); \n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/132", "completion": "\n\n\n\n\npublic class Solution {\n    public static int canArrange(int[] arr) {\n        \n        for (int i = arr.length - 1; i > 0; i--) {\n            if (arr[i] < arr[i - 1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n} \n\n\nSystem.out.println(can_arrange(new int[]{1,2,4,3,5})); \nSystem.out.println(can_arrange(new int[]{1,2,3})); \nSystem.out.println(can_arrange(new int[]{5,4,3,2,1})); \nSystem.out.println(can_arrange(new int[]{1,3,2,4,5})); \nSystem.out.println(can_arrange(new int[]{1,2,3,4,5})); \nSystem.out.println(can_arrange(new int[]{1,2,3,4,5,6})); \nSystem.out.println(can_arrange(new int[]{1,2,3,4,", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/12", "completion": "\n\n\n    if (strings.isEmpty()) {\n        return null;\n    }\n\n    var longestString = strings[0];\n\n    for (string in strings) {\n        if (string.length > longestString.length) {\n            longestString = string;\n        }\n    }\n\n    return longestString;\n} ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/31", "completion": "\n\n\n\n\npublic boolean is_prime(int num) {\n    \n    if (num == 1) return false;\n\n    \n    for (int i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i == 0) {\n            \n            return false;\n        }\n    }\n\n    \n    return true;\n} \n\n\nSystem.out.println(is_prime(6)); \nSystem.out.println(is_prime(101)); \nSystem.out.println(is_prime(11)); \nSystem.out.println(is_prime(13441)); \nSystem.out.println(is_prime(61)); \nSystem.out.println(is_prime(4)); \nSystem.out.println(is_prime(1)); \n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/102", "completion": "\n\n\n\n\nimport java.util.Arrays;\n\npublic class Solution {\n    public static String[] sortAndReverseDigits(int[] arr) {\n        \n        int[] filteredArray = Arrays.stream(arr)\n                                     .filter(num -> num >= 1 && num <= 9)\n                                     .toArray();\n\n        \n        Arrays.sort(filteredArray);\n\n        \n        for (int i = 0; i < filteredArray.length / 2; i++) {\n            int temp = filteredArray[i];\n            filteredArray[i] = filteredArray[filteredArray.length - 1 - i];\n            filteredArray[filteredArray.length - 1 - i] = temp;\n        }\n\n        \n        String[] result = new String[filteredArray.length];\n        for (int i = 0; i < filteredArray.length; i++) {\n            switch (filteredArray[i]) {\n                case 1:\n                    result[i] = \"One\";\n                    break;\n                case 2:\n                    result[i] = \"Two\";\n                    break;\n                case 3:\n                    result[i] = \"Three\";\n                    break;\n                case 4:\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/64", "completion": "\n\n\n\n\npublic class Solution {\n    public static int fruit_distribution(String s, int n) {\n        \n        String[] parts = s.split(\" and \");\n        \n        \n        int apples = Integer.parseInt(parts[0].split(\" \")[0]);\n        \n        \n        int oranges = Integer.parseInt(parts[1].split(\" \")[0]);\n        \n        \n        int mangoes = n - (apples + oranges);\n        \n        \n        return mangoes;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/157", "completion": "\n\n\n\n\nimport java.util.List;\n\npublic class Solution {\n    public int evaluateExpression(List<String> operators, List<Integer> operands) {\n        int result = operands.get(0);\n        for (int i = 0; i < operators.size(); i++) {\n            int nextOperand = operands.get(i + 1);\n            switch (operators.get(i)) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"\n                    result /= nextOperand;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid operator: \" + operators.get(i));\n            }\n        }\n        return result;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/96", "completion": "\n\n\n\n\npublic class RoundAwayFromZero {\n    public static int closestInteger(String num) {\n        double n = Double.parseDouble(num);\n        double floor = Math.floor(n);\n        double ceil = Math.ceil(n);\n\n        if (n - floor == 0.5 || ceil - n == 0.5) {\n            return (int) (n > 0 ? ceil : floor);\n        } else {\n            return (int) Math.round(n);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(closest_integer(\"10\")); \n        System.out.println(closest_integer(\"15.3\")); \n        System.out.println(closest_integer(\"14.5\")); \n        System.out.println(closest_integer(\"-14.5\")); \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/44", "completion": "\n\n\n\n\npublic class Solution {\n    public int fib4(int n) {\n        \n        if (n < 2) return 0;\n        if (n == 2) return 2;\n\n        int[] dp = new int[n+1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 2;\n\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4];\n        }\n\n        return dp[n];\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/63", "completion": "\n\n\n\n\npublic class UpperCaseSum {\n\n    public static int digitSum(String str) {\n        int sum = 0;\n        for (char c : str.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n\n} \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/14", "completion": "\n\n\n\n\npublic List<String> all_prefixes(String s) {\n    List<String> result = new ArrayList<>();\n    for (int i = 1; i <= s.length(); i++) {\n        result.add(s.substring(0, i));\n    }\n    return result;\n} \n\n\npublic static void main(String[] args) {\n    System.out.println(all_prefixes(\"abc\").toString());\n} \n\n\n\npublic static void test_all_prefixes() {\n    System.out.println(all_prefixes(\"abc\").toString());\n} \n\n\n\npublic static void test_all_prefixes_2() {\n    System.out.println(all_prefixes(\"abcd\").toString());\n} \n\n\n\npublic static void test_all_prefixes_3() {\n    System.out.println(all_prefixes(\"abcd", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/95", "completion": "\n\n\n\n\npublic class Solution {\n    public int count_upper(String s) {\n        \n        int count = 0;\n\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n\n            \n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/9", "completion": "\n\n\n\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class RollingMax {\n    public static List<Integer> rolling_max(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        if (nums.isEmpty()) {\n            return result;\n        }\n        int max = nums.get(0);\n        for (int num : nums) {\n            if (num > max) {\n                max = num;\n            }\n            result.add(max);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> input = new ArrayList<>(List.of(1, 2, 3, 2, 3, 4, 2));\n        List<Integer> output = rolling_max(input);\n        System.out.println(output); \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/152", "completion": "\n\n\n\n\npublic class EvenOddCount {\n\n    public static int[] evenOddCount(int num) {\n        \n        String strNum = Integer.toString(Math.abs(num)); \n\n        int evenCount = 0;\n        int oddCount = 0;\n\n        \n        for (int i = 0; i < strNum.length(); i++) {\n            int digit = Character.getNumericValue(strNum.charAt(i));\n\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n\n        \n        return new int[]{evenCount, oddCount};\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(Arrays.toString(evenOddCount(-12))); \n        System.out.println(Arrays.toString(evenOddCount(123))); \n        System.out.println(Arrays.toString(evenOddCount(0)));   \n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/50", "completion": "\n\n\n\n\npublic class Solution {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n} \n\n\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(add(2, 3));\n        System.out.println(add(5, 7));\n    }\n} \n\n\n\n\n\n\n\n\n\n\n\n\n\n", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/85", "completion": "\n\n\n\n\nimport java.util.Arrays;\n\npublic class Solution {\n    public static int[] sortArray(int[] arr) {\n        \n        if (arr.length == 0) {\n            return new int[0];\n        }\n\n        \n        int sum = arr[0] + arr[arr.length - 1];\n\n        \n        int[] sortedArr = Arrays.copyOf(arr, arr.length);\n\n        \n        if (sum % 2 == 0) {\n            \n            Arrays.sort(sortedArr);\n            for (int i = 0; i < sortedArr.length / 2; i++) {\n                int temp = sortedArr[i];\n                sortedArr[i] = sortedArr[sortedArr.length - 1 - i];\n                sortedArr[sortedArr.length - 1 - i] = temp;\n            }\n        } else {\n            \n            Arrays.sort(sortedArr);\n        }\n\n        return sortedArr;\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(Arrays.toString", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/91", "completion": "\n\n\n\n\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        \n        int largestPrime = lst.stream()\n                .filter(this::isPrime)\n                .max(Integer::compare)\n                .orElse(0);\n\n        \n        if (largestPrime == 0) {\n            return 0;\n        }\n\n        \n        int sumOfDigits = String.valueOf(largestPrime)\n                .chars()\n                .map(Character::getNumericValue)\n                .sum();\n\n        return sumOfDigits;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/148", "completion": "\n\n\n\n\nimport java.util.List;\n\npublic class DoubleTheDifference {\n    public static int double_the_difference(List<Integer> nums) {\n        \n        int sum = 0;\n        \n        \n        for (int num : nums) {\n            \n            if (num > 0 && num % 1 == 0) {\n                \n                if (num % 2 != 0) {\n                    \n                    sum += num * num;\n                }\n            }\n        }\n        \n        \n        return sum;\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/121", "completion": "\n\n\n\n\npublic boolean validDate(String date) {\n    \n    String[] parts = date.split(\"-\");\n    \n    \n    if (parts.length != 3) {\n        return false;\n    }\n    \n    \n    int month = Integer.parseInt(parts[0]);\n    int day = Integer.parseInt(parts[1]);\n    int year = Integer.parseInt(parts[2]);\n    \n    \n    if (month < 1 || month > 12) {\n        return false;\n    }\n    \n    \n    if (day < 1 || day > 31) {\n        return false;\n    }\n    \n    \n    if (month == 2) {\n        if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {\n            \n            if (day > 29) {\n               ", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/137", "completion": "\n\n\n\n\npublic class Solution {\n    public String fixSpaces(String text) {\n        \n        StringBuilder sb = new StringBuilder();\n        int count = 0;\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                count++;\n                continue;\n            }\n            if (count > 2) {\n                sb.append('-');\n                count = 0;\n            } else if (count > 0) {\n                sb.append('_');\n            }\n            sb.append(c);\n        }\n        if (count > 0) {\n            sb.append('_');\n        }\n        return sb.toString();\n    }\n}", "language": "kotlin"}

{"task_id": "HumanEval_kotlin/77", "completion": "\n\n\n\n\npublic class Solution {\n    public boolean isHappy(String s) {\n        \n        int n = s.length();\n        if(n < 3){\n            return false;\n        }\n        for(int i = 0; i < n - 2; i++){\n            if(s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)){\n                return false;\n            }\n        }\n        return true;\n    }\n} ", "language": "kotlin"}